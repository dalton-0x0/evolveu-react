{"version":3,"sources":["components/logo.svg","containers/svg_images/001-home.svg","containers/svg_images/002-game.svg","containers/svg_images/003-account.svg","containers/svg_images/004-city.svg","containers/svg_images/005-link.svg","containers/svg_images/006-stack.svg","serviceWorker.js","components/Logo.js","components/home/Home.js","components/game/Square.js","components/game/Board.js","components/game/Game.js","components/account/InputBtn.js","components/account/InputForm.js","components/account/ResultsDisp.js","components/account/Controller.js","components/account/Cards.js","components/account/Account.js","components/city/CityInputBtn.js","components/city/CityInputForm.js","components/city/CityResultsDisp.js","components/city/CityController.js","components/city/FetchFunctions.js","components/city/CityCards.js","components/city/City.js","components/linkedlist/LinkedListFns.js","components/linkedlist/LinkedList.js","components/stack/Stack.js","containers/App.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","Logo","name","this","props","src","image","className","style","onClick","alt","React","Component","HomeApp","state","pageStatus","color","fontFamily","fontSize","logo","Square","isWinning","value","Board","i","key","winningSquares","includes","squares","n","push","renderOneSquare","renderThreeSquares","renderRows","calculateWinner","lines","length","a","b","c","player","line","GameApp","history","Array","fill","xIsNext","stepNumber","isAscending","winner","level","players","first","gameOff","playersChange","bind","levelChange","firstChange","gameStarts","reload","locations","slice","current","setState","concat","expertLevel","beginnerLevel","goodSquares","evaluateSquares","max","bestSquares","filter","itm","index","getRndInteger","setTimeout","handleClick","goodNotBestSquars","sort","secondMax","secondBestSquares","min","Math","floor","random","evaluatedIndexes","map","step","e","target","status","moves","move","desc","console","log","Button","variant","jumpTo","Form","Control","as","title","onChange","DropdownButton","Dropdown","Item","sortHistory","refreshPage","reverse","InputBtn","id","onSubmit","InputForm","counter","accountName","accountBalance","handleFormChange","handleSubmitForm","preventDefault","newState","type","ResultsDisp","totalBal","highestBal","lowestBal","numberAcc","AccountClass","String","formatDisplayValue","depAmt","wthAmt","userInput","round","AccountController","accountNamesArr","_accountsList","WeakMap","set","num","newAccount","reduce","accumulator","account","Number","newAccountNamesArr","Cards","handleDepositBtn","cardInputValue","formatCardInput","cardInput","cardResult","accountCard","deposit","accountCardUpdate","toFixed","updateCard","handleWithdrawBtn","withdraw","handleBalanceBtn","balanceCard","handleDeleteBtn","deleteCard","keyCard","handleInputChange","userInputInCard","isNaN","parseFloat","AccountApp","addReactAccount","params","accountController","addAccount","updateAccounts","deleteReactAccount","removeAccount","lowest","highest","total","lowestBalance","highestBalance","totalBalance","displayCards","card","toString","cityName","cityPopulation","cityLatitude","cityLongitude","totalPopulation","northmostLatitude","southmostLatitude","numberOfCities","serverMessage","CityClass","parseInt","trim","Community","cityNamesArr","cityObj","city","newCity","newCityNamesArr","newCommunity","cityFetch","postData","url","data","fetch","method","mode","cache","credentials","headers","redirect","referrer","body","JSON","stringify","response","json","getAllCitiesServer","keysArray","lastKey","postNewToServer","clearServerOnLoad","updateCityServer","currentCity","deleteCityServer","removeKey","htmlReloadCities","then","request","serverCity","createCity","handleMovedInBtn","cityCard","movedIn","cityCardUpdate","handleMovedOutBtn","movedOut","handleHowBigBtn","howBig","handleRemoveBtn","CityApp","addReactCity","counterValue","cityCounter","cityController","updateCities","deleteReactCity","deleteCity","southernmost","northernmost","getMostSouthern","getMostNorthern","getTotalPopulation","populationCard","serverMsg","keyCounter","ListNode","subject","amount","forwardPointer","newList","head","next","previousNode","newNode","previous","node","LinkedListApp","useState","setSubject","setAmount","setCurrent","setTotal","pressEnter","handleInsert","insert","placeholder","onKeyPress","delete","last","fontWeight","listDisplay","renderNodes","StackApp","App","onSelect","selected","renderIcons","icons","icon","showPage","homeLogo","gameLogo","accountLogo","cityLogo","linkedListLogo","stackLogo","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7ecb86c2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.08cee20e.svg\";","module.exports = __webpack_public_path__ + \"static/media/001-home.b0be534a.svg\";","module.exports = __webpack_public_path__ + \"static/media/002-game.4c2748a2.svg\";","module.exports = __webpack_public_path__ + \"static/media/003-account.0e5cbe3f.svg\";","module.exports = __webpack_public_path__ + \"static/media/004-city.2bd9ed31.svg\";","module.exports = __webpack_public_path__ + \"static/media/005-link.abdf1f92.svg\";","module.exports = __webpack_public_path__ + \"static/media/006-stack.059ab19d.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\n\nclass Logo extends React.Component {\n  render() {\n    return (\n      <img\n        name={this.props.name}\n        src={this.props.image}\n        className=\"images-svg\"\n        style={this.props.style}\n        onClick={this.props.onClick}\n        alt=\"nav-icon\"\n      />\n    );\n  }\n}\n\nexport default Logo;\n","import React from \"react\";\nimport logo from \"../logo.svg\";\nimport \"./Home.css\";\n\nclass HomeApp extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      pageStatus: `Comp-140B: Homepage!`\n    };\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1\n            style={{\n              color: \"#ffff00\",\n              fontFamily: \"Ubuntu\",\n              fontSize: \"2.5rem\"\n            }}\n          >\n            <strong>{this.state.pageStatus}</strong>\n          </h1>\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p\n            style={{\n              color: \"#ffff00\",\n              fontFamily: \"Ubuntu\",\n              fontSize: \"2.5rem\"\n            }}\n          >\n            <strong>Have Fun!</strong>\n          </p>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default HomeApp;\n","import React from \"react\";\n\nfunction Square(props) {\n  return (\n    <button\n      className={`square ${props.isWinning ? \"square--winning\" : null}`}\n      onClick={props.onClick}\n    >\n      {props.value}\n    </button>\n  );\n}\n\nexport default Square;\n","import React, { Fragment } from \"react\";\nimport Square from \"./Square\";\n\nclass Board extends React.Component {\n  renderOneSquare(i) {\n    return (\n      <Square\n        key={`square-${i}`}\n        isWinning={this.props.winningSquares.includes(i)}\n        value={this.props.squares[i]}\n        onClick={() => this.props.onClick(i)}\n      />\n    );\n  }\n\n  renderThreeSquares(n) {\n    let squares = [];\n    for (let i = n; i < n + 3; i++) {\n      squares.push(this.renderOneSquare(i));\n    }\n    return squares;\n  }\n\n  renderRows(i) {\n    return <div className=\"board-row\">{this.renderThreeSquares(i)}</div>;\n  }\n\n  render() {\n    return (\n      <Fragment>\n        {this.renderRows(0)}\n        {this.renderRows(3)}\n        {this.renderRows(6)}\n      </Fragment>\n    );\n  }\n}\n\nexport default Board;\n","import React, { Fragment } from \"react\";\nimport Board from \"./Board\";\nimport \"./Game.css\";\nimport Button from \"react-bootstrap/Button\";\nimport DropdownButton from \"react-bootstrap/DropdownButton\";\nimport Dropdown from \"react-bootstrap/Dropdown\";\nimport Form from \"react-bootstrap/Form\";\n\nclass GameApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [\n        {\n          squares: Array(9).fill(null)\n        }\n      ],\n      xIsNext: true,\n      stepNumber: 0,\n      isAscending: true,\n      winner: null,\n      level: \"Expert\",\n      players: \"1-Player\",\n      first: \"Human\",\n      gameOff: true\n    };\n    this.playersChange = this.playersChange.bind(this);\n    this.levelChange = this.levelChange.bind(this);\n    this.firstChange = this.firstChange.bind(this);\n    this.gameStarts = this.gameStarts.bind(this);\n  }\n  refreshPage() {\n    window.location.reload();\n  }\n  async handleClick(i) {\n    const locations = [\n      [1, 1],\n      [2, 1],\n      [3, 1],\n      [1, 2],\n      [2, 2],\n      [3, 2],\n      [1, 3],\n      [2, 3],\n      [3, 3]\n    ];\n    const history = this.state.history.slice(0, this.state.stepNumber + 1); // array.slice(start, end)\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n    if (this.state.winner || squares[i]) {\n      return;\n    }\n    this.state.xIsNext ? (squares[i] = \"X\") : (squares[i] = \"O\");\n    // squares[i] = this.state.xIsNext ? \"X\" : \"O\";\n    let winner = calculateWinner(squares);\n    await this.setState({\n      history: history.concat([\n        {\n          squares: squares,\n          location: locations[i]\n        }\n      ]),\n      xIsNext: !this.state.xIsNext,\n      stepNumber: history.length,\n      winner: winner\n    });\n    if (\n      this.state.xIsNext === false &&\n      this.state.winner === null &&\n      this.state.players === \"1-Player\" &&\n      this.state.level === \"Expert\"\n    ) {\n      this.expertLevel();\n    }\n    if (\n      this.state.xIsNext === false &&\n      this.state.winner === null &&\n      this.state.players === \"1-Player\" &&\n      this.state.level === \"Beginner\"\n    ) {\n      this.beginnerLevel();\n    }\n  }\n\n  expertLevel() {\n    let goodSquares = this.evaluateSquares();\n    let max = goodSquares[0].value;\n    let bestSquares = goodSquares.filter(itm => itm.value === max);\n    let random = this.getRndInteger(0, bestSquares.length - 1);\n    let index = bestSquares[random].index;\n    setTimeout(index => this.handleClick(index), 250, index);\n  }\n\n  beginnerLevel() {\n    let goodSquares = this.evaluateSquares();\n    let max = goodSquares[0].value;\n    let bestSquares = goodSquares.filter(itm => itm.value === max);\n    let goodNotBestSquars = goodSquares.filter(itm => itm.value !== max);\n    let smartness = this.getRndInteger(1, 100);\n    if (smartness <= 30 && max < 18 && goodNotBestSquars.length > 0) {\n      goodNotBestSquars.sort((a, b) => b.value - a.value);\n      let secondMax = goodNotBestSquars[0].value;\n      let secondBestSquares = goodNotBestSquars.filter(\n        itm => itm.value === secondMax\n      );\n      let random = this.getRndInteger(0, secondBestSquares.length - 1);\n      let index = secondBestSquares[random].index;\n      setTimeout(index => this.handleClick(index), 250, index);\n    } else {\n      let random = this.getRndInteger(0, bestSquares.length - 1);\n      let index = bestSquares[random].index;\n      setTimeout(index => this.handleClick(index), 250, index);\n    }\n  }\n\n  getRndInteger(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  }\n\n  evaluateSquares() {\n    let history = this.state.history;\n    let current = history[this.state.stepNumber];\n    const squares = current.squares.slice();\n    let evaluatedIndexes = [];\n    const lines = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6]\n    ];\n    for (let itm of lines) {\n      let [a, b, c] = itm;\n      if (squares[a] === null && squares[b] === \"O\" && squares[c] === \"O\") {\n        evaluatedIndexes.push({ index: a, value: 20 });\n      }\n      if (squares[b] === null && squares[a] === \"O\" && squares[c] === \"O\") {\n        evaluatedIndexes.push({ index: b, value: 20 });\n      }\n      if (squares[c] === null && squares[a] === \"O\" && squares[b] === \"O\") {\n        evaluatedIndexes.push({ index: c, value: 20 });\n      }\n      if (squares[a] === null && squares[b] === \"X\" && squares[c] === \"X\") {\n        evaluatedIndexes.push({ index: a, value: 18 });\n      }\n      if (squares[b] === null && squares[a] === \"X\" && squares[c] === \"X\") {\n        evaluatedIndexes.push({ index: b, value: 18 });\n      }\n      if (squares[c] === null && squares[a] === \"X\" && squares[b] === \"X\") {\n        evaluatedIndexes.push({ index: c, value: 18 });\n      }\n      if (squares[a] === null && squares[b] === null && squares[c] === \"O\") {\n        evaluatedIndexes.push({ index: a, value: 10 });\n        evaluatedIndexes.push({ index: b, value: 10 });\n      }\n      if (squares[a] === null && squares[c] === null && squares[b] === \"O\") {\n        evaluatedIndexes.push({ index: a, value: 10 });\n        evaluatedIndexes.push({ index: c, value: 10 });\n      }\n      if (squares[b] === null && squares[c] === null && squares[a] === \"O\") {\n        evaluatedIndexes.push({ index: b, value: 10 });\n        evaluatedIndexes.push({ index: c, value: 10 });\n      } else {\n        if (squares[a] === null) evaluatedIndexes.push({ index: a, value: 1 });\n        if (squares[b] === null) evaluatedIndexes.push({ index: b, value: 1 });\n        if (squares[c] === null) evaluatedIndexes.push({ index: c, value: 1 });\n      }\n    }\n    evaluatedIndexes = evaluatedIndexes.map(itm => {\n      if (\n        ((squares[0] === \"X\" && squares[8] === \"X\") ||\n          (squares[2] === \"X\" && squares[6] === \"X\")) &&\n        (itm.index === 1 ||\n          itm.index === 3 ||\n          itm.index === 5 ||\n          itm.index === 7)\n      ) {\n        return { index: itm.index, value: itm.value + 5 };\n      } else if (itm.index === 4) {\n        return { index: itm.index, value: itm.value + 3 };\n      } else if (\n        itm.index === 0 ||\n        itm.index === 2 ||\n        itm.index === 6 ||\n        itm.index === 8\n      ) {\n        return { index: itm.index, value: itm.value + 2 };\n      } else {\n        return { index: itm.index, value: itm.value };\n      }\n    });\n    evaluatedIndexes.sort((a, b) => b.value - a.value);\n    return evaluatedIndexes;\n  }\n\n  async jumpTo(step) {\n    // equating move to stepNumber\n    let history = this.state.history;\n    let current = history[step];\n    const squares = current.squares.slice();\n    let winner = calculateWinner(squares);\n    if (this.state.first === \"Human\") {\n      await this.setState({\n        stepNumber: step,\n        xIsNext: step % 2 === 0,\n        winner: winner\n      });\n    }\n    if (this.state.first === \"Computer\") {\n      await this.setState({\n        stepNumber: step,\n        xIsNext: !(step % 2 === 0),\n        winner: winner\n      });\n    }\n    if (\n      this.state.xIsNext === false &&\n      this.state.winner === null &&\n      this.state.players === \"1-Player\" &&\n      this.state.level === \"Expert\"\n    ) {\n      this.expertLevel();\n    }\n    if (\n      this.state.xIsNext === false &&\n      this.state.winner === null &&\n      this.state.players === \"1-Player\" &&\n      this.state.level === \"Beginner\"\n    ) {\n      this.beginnerLevel();\n    }\n  }\n\n  sortHistory() {\n    this.setState({\n      isAscending: !this.state.isAscending\n    });\n  }\n\n  async playersChange(e) {\n    await this.setState({ players: e.target.value });\n    if (\n      this.state.xIsNext === false &&\n      this.state.winner === null &&\n      this.state.players === \"1-Player\" &&\n      this.state.level === \"Expert\"\n    ) {\n      this.expertLevel();\n    }\n    if (\n      this.state.xIsNext === false &&\n      this.state.winner === null &&\n      this.state.players === \"1-Player\" &&\n      this.state.level === \"Beginner\"\n    ) {\n      this.beginnerLevel();\n    }\n  }\n\n  levelChange(e) {\n    this.setState({ level: e.target.value });\n  }\n\n  firstChange(e) {\n    this.setState({ first: e.target.value });\n    this.setState(state => ({ xIsNext: !state.xIsNext }));\n  }\n\n  gameStarts() {\n    this.setState({ gameOff: false });\n    if (\n      this.state.xIsNext === false &&\n      this.state.winner === null &&\n      this.state.players === \"1-Player\"\n    ) {\n      let indexArray = [0, 2, 4, 6, 8];\n      let random = this.getRndInteger(0, 4);\n      let index = indexArray[random];\n      setTimeout(index => this.handleClick(index), 250, index);\n    }\n  }\n\n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const winner = calculateWinner(current.squares);\n\n    const moves = history.map((step, move) => {\n      // array.map(function(currentValue, index, arr), thisValue)\n      const desc = move\n        ? `Go to move #${move} at ${history[move].location}`\n        : `Go to blank board`;\n      console.log(\"history\", history);\n      console.log(\"step\", step);\n      console.log(\"move\", move);\n      return (\n        <li key={move}>\n          <Button variant=\"secondary\" onClick={() => this.jumpTo(move)}>\n            {move === this.state.stepNumber ? (\n              <b style={{ color: \"yellow\" }}>{desc}</b>\n            ) : (\n              desc\n            )}\n          </Button>\n        </li>\n      );\n    });\n\n    let status;\n    if (winner) {\n      status = `Game Winner: ${winner.player}`;\n    } else if (!current.squares.includes(null)) {\n      status = `It's a Draw!`;\n    } else {\n      status = `Next Player: ${this.state.xIsNext ? \"X\" : \"O\"}`;\n    }\n    return (\n      <Fragment>\n        <div className=\"game\">\n          <div className=\"game-options\">\n            <div className=\"game-options-div\">\n              <Form.Control\n                as=\"select\"\n                title=\"Number of Players\"\n                value={this.state.players}\n                onChange={this.playersChange}\n              >\n                <option value=\"1-Player\">1-Player</option>\n                <option value=\"2-Player\">2-Player</option>\n              </Form.Control>\n            </div>\n            <div className=\"game-options-div\">\n              {this.state.players === \"1-Player\" && (\n                <Form.Control\n                  as=\"select\"\n                  title=\"Game Difficulty\"\n                  value={this.state.level}\n                  onChange={this.levelChange}\n                >\n                  <option value=\"1-Player\">Beginner</option>\n                  <option value=\"2-Player\">Expert</option>\n                </Form.Control>\n              )}\n            </div>\n            <div className=\"game-options-div\">\n              {this.state.players === \"1-Player\" && (\n                <Form.Control\n                  as=\"select\"\n                  title=\"Game Difficulty\"\n                  value={this.state.first}\n                  onChange={this.firstChange}\n                >\n                  <option value=\"Human\">Human</option>\n                  <option value=\"Computer\">Computer</option>\n                </Form.Control>\n              )}\n            </div>\n            <div className=\"game-options-div\">\n              <DropdownButton\n                variant=\"dark\"\n                className=\"sort\"\n                title=\"Sort Moves\"\n              >\n                <Dropdown.Item as=\"button\" onClick={() => this.sortHistory()}>\n                  {this.state.isAscending ? \"Descending\" : \"Ascending\"}\n                </Dropdown.Item>\n              </DropdownButton>\n              <div>\n                <Button\n                  onClick={() => this.refreshPage()}\n                  className=\"reset\"\n                  variant=\"dark\"\n                >\n                  <b style={{ color: \"yellow\" }}>Clear Board</b>\n                </Button>\n              </div>\n            </div>\n          </div>\n          <div className=\"game-board\">\n            <div className=\"status\">{status}</div>\n            <div className=\"board-row-div\">\n              <Board\n                className=\"board-main\"\n                winningSquares={winner ? winner.line : []}\n                squares={current.squares}\n                onClick={i => this.handleClick(i)}\n              />\n            </div>\n          </div>\n          <div className=\"game-info\">\n            <div className=\"computer-start-div\">\n              <Button\n                onClick={this.gameStarts}\n                className=\"computer-start\"\n                variant=\"success\"\n              >\n                <b style={{ color: \"yellow\" }}>Computer Start</b>\n              </Button>\n            </div>\n            <div className=\"moves-list sort\">\n              <ol>{this.state.isAscending ? moves : moves.reverse()}</ol>\n            </div>\n          </div>\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6]\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return { player: squares[a], line: [a, b, c] };\n      // return squares[a];\n    }\n  }\n  return null;\n}\n\nexport default GameApp;\n","import React from \"react\";\n\nfunction InputBtn(props) {\n  return (\n    <button id=\"addAccBtn\" onClick={props.onSubmit}>\n      Add Account\n    </button>\n  );\n}\n\nexport default InputBtn;\n","import React, { Fragment } from \"react\";\nimport \"./Account.css\";\nimport InputBtn from \"./InputBtn\";\n\nclass InputForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      counter: 0,\n      accountName: \"\",\n      accountBalance: \"\"\n    };\n    this.handleFormChange = this.handleFormChange.bind(this);\n    this.handleSubmitForm = this.handleSubmitForm.bind(this);\n  }\n  handleFormChange(e) {\n    const value = e.target.value;\n    const name = e.target.name;\n    this.setState({\n      [name]: value\n    });\n  }\n\n  handleSubmitForm(e) {\n    e.preventDefault(e);\n    this.props.onSubmit(this.state);\n    this.setState(newState => {\n      return {\n        counter: newState.counter + 1\n      };\n    });\n    this.setState({ accountName: \"\", accountBalance: \"\" });\n  }\n\n  render() {\n    return (\n      <Fragment>\n        <h2>\n          <strong>Account Details</strong>\n        </h2>\n        <form onSubmit={this.handleSubmitForm}>\n          <label className=\"right-input-label\">Account Name:</label>\n          <input\n            onChange={this.handleFormChange}\n            name=\"accountName\"\n            type=\"text\"\n            className=\"right-input\"\n            value={this.state.accountName}\n          />\n          <label className=\"right-input-label\">Initial Balance:</label>\n          <input\n            onChange={this.handleFormChange}\n            name=\"accountBalance\"\n            type=\"number\"\n            className=\"right-input\"\n            min=\"0\"\n            step=\"0.01\"\n            value={this.state.accountBalance}\n          />\n          <InputBtn onSubmit={this.handleSubmitForm} />\n        </form>\n      </Fragment>\n    );\n  }\n}\n\nexport default InputForm;\n","import React from \"react\";\n\nfunction ResultsDisp(props) {\n  return (\n    <div id=\"resultsContainer\">\n      <label className=\"results-label\">Total Balance:</label>\n      <span className=\"results-span\">{props.totalBal}</span>\n      <br />\n      <label className=\"results-label\">Highest Balance:</label>\n      <span className=\"results-span\">{props.highestBal}</span>\n      <br />\n      <label className=\"results-label\">Lowest Balance:</label>\n      <span className=\"results-span\">{props.lowestBal}</span>\n      <br />\n      <label className=\"results-label\">No. of Accounts:</label>\n      <span className=\"results-span\">{props.numberAcc}</span>\n    </div>\n  );\n}\n\nexport default ResultsDisp;\n","export class AccountClass {\n  constructor(key, accountName, accountBalance) {\n    this.key = key;\n    this.accountName = String(accountName);\n    accountBalance < 0\n      ? (this.accountBalance = 0)\n      : (this.accountBalance = this.formatDisplayValue(accountBalance));\n  }\n  deposit(depAmt) {\n    this.accountBalance += depAmt;\n  }\n  withdraw(wthAmt) {\n    /*\n    if (wthAmt > this.accountBalance) {\n      throw new Error(\"Insufficient Funds!\");\n    }\n    */\n    this.accountBalance -= wthAmt;\n  }\n  balance() {\n    return this.accountBalance;\n  }\n  formatDisplayValue(userInput) {\n    return Math.round(userInput * 100) / 100;\n  }\n}\n\nexport class AccountController {\n  constructor(accountNamesArr = []) {\n    const _accountsList = new WeakMap();\n    _accountsList.set(this, _accountsList);\n    this.accountNamesArr = accountNamesArr;\n  }\n\n  get accountsList() {\n    return this.accountNamesArr;\n  }\n\n  getAccountKey(num) {\n    for (let i = 0; i < this.accountNamesArr.length; i++) {\n      if (this.accountNamesArr[i].key === num) {\n        return this.accountNamesArr[i];\n      }\n    }\n    return null;\n  }\n\n  addAccount(key, accountName, accountBalance) {\n    let newAccount = new AccountClass(key, accountName, accountBalance);\n    this.accountNamesArr.push(newAccount);\n    return newAccount;\n  }\n\n  totalBalance() {\n    const total = this.accountNamesArr.reduce(\n      (accumulator, account) => accumulator + account.accountBalance,\n      0\n    );\n    return total;\n  }\n\n  highestBalance() {\n    const accountNamesArrCopy = this.accountNamesArr.slice();\n    return accountNamesArrCopy.sort(\n      (a, b) => b.accountBalance - a.accountBalance\n    )[0];\n  }\n\n  lowestBalance() {\n    const accountNamesArrCopy = this.accountNamesArr.slice();\n    return accountNamesArrCopy.sort(\n      (a, b) => a.accountBalance - b.accountBalance\n    )[0];\n  }\n\n  removeAccount(key) {\n    key = Number(key);\n    const newAccountNamesArr = this.accountNamesArr.filter(\n      account => account.key !== key\n    );\n    this.accountNamesArr = newAccountNamesArr;\n    return this.accountNamesArr;\n  }\n}\n","import React, { Fragment } from \"react\";\n\nclass Cards extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      accountCard: this.props.accountCard,\n      cardInput: \"\",\n      cardResult: \"\"\n    };\n    this.handleInputChange = this.handleInputChange.bind(this);\n  }\n\n  handleInputChange(e) {\n    this.setState({ cardInput: e.target.value });\n  }\n\n  formatCardInput(userInputInCard) {\n    if (\n      isNaN(userInputInCard) ||\n      typeof userInputInCard === \"undefined\" ||\n      userInputInCard === \"\"\n    ) {\n      return false;\n    }\n    return parseFloat(userInputInCard);\n  }\n\n  handleDepositBtn = e => {\n    e.preventDefault(e);\n    let cardInputValue = this.formatCardInput(this.state.cardInput);\n    console.log(\"deposit clicked\", cardInputValue);\n    if (!cardInputValue || cardInputValue <= 0) {\n      this.setState({\n        cardResult: `Enter Valid Deposit Amount`\n      });\n      return;\n    }\n    this.state.accountCard.deposit(cardInputValue);\n    const accountCardUpdate = this.state.accountCard;\n    this.setState({\n      accountCard: accountCardUpdate,\n      cardInput: \"\",\n      cardResult: `Deposited: $${cardInputValue.toFixed(2)}`\n    });\n    this.props.updateCard();\n  };\n\n  handleWithdrawBtn = e => {\n    e.preventDefault(e);\n    let cardInputValue = this.formatCardInput(this.state.cardInput);\n    console.log(\"withdraw clicked\", cardInputValue);\n    if (!cardInputValue || cardInputValue <= 0) {\n      this.setState({\n        cardResult: `Enter Valid Withdraw Amount`\n      });\n      return;\n    } else if (cardInputValue > this.state.accountCard.accountBalance) {\n      this.setState({\n        cardResult: `Insufficient Funds in Account`\n      });\n      return;\n    }\n    this.state.accountCard.withdraw(cardInputValue);\n    const accountCardUpdate = this.state.accountCard;\n    this.setState({\n      accountCard: accountCardUpdate,\n      cardInput: \"\",\n      cardResult: `Withdrew: $${cardInputValue.toFixed(2)}`\n    });\n    this.props.updateCard();\n  };\n\n  handleBalanceBtn = () => {\n    console.log(\"balance clicked\");\n    this.setState({\n      cardResult: `You have $${this.props.balanceCard} in your Account`\n    });\n    this.props.updateCard();\n  };\n\n  handleDeleteBtn = () => {\n    this.props.deleteCard(this.props.keyCard);\n    const accountCardUpdate = this.state.accountCard;\n    this.setState({\n      accountCard: accountCardUpdate\n    });\n    this.props.updateCard();\n  };\n\n  render() {\n    let { accountName, accountBalance } = this.state.accountCard;\n    return (\n      <Fragment>\n        <div className=\"card-div\">\n          <span className=\"para-left-card-name\">Name: {accountName}</span>\n          <br />\n          <input\n            value={this.state.cardInput}\n            onChange={this.handleInputChange}\n            className=\"card-input\"\n            type=\"number\"\n            min=\"0\"\n            step=\"0.01\"\n          />\n          <br />\n          <button className=\"btn-card-dep\" onClick={this.handleDepositBtn}>\n            Deposit\n          </button>\n          <button className=\"btn-card-wth\" onClick={this.handleWithdrawBtn}>\n            Withdraw\n          </button>\n          <button className=\"btn-card-bal\" onClick={this.handleBalanceBtn}>\n            Balance\n          </button>\n          <br />\n          <button className=\"btn-card-del\" onClick={this.handleDeleteBtn}>\n            Delete\n          </button>\n          <br />\n          <span className=\"para-left-card-output\">\n            Balance: ${accountBalance}\n          </span>\n          <br />\n          <span className=\"para-left-card-output\">{this.state.cardResult}</span>\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nexport default Cards;\n","import React, { Fragment } from \"react\";\nimport \"./Account.css\";\nimport InputForm from \"./InputForm\";\nimport ResultsDisp from \"./ResultsDisp\";\nimport { AccountController } from \"./Controller\";\nimport Cards from \"./Cards\";\n\nclass AccountApp extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      lowest: \"--\",\n      highest: \"--\",\n      total: 0\n    };\n    this.accountController = new AccountController();\n  }\n\n  addReactAccount = params => {\n    const { counter, accountName, accountBalance } = params;\n    this.accountController.addAccount(counter, accountName, accountBalance);\n    console.log(this.accountController.accountNamesArr);\n    this.updateAccounts();\n  };\n\n  deleteReactAccount = num => {\n    this.accountController.removeAccount(num);\n    console.log(this.accountController.accountNamesArr);\n    this.updateAccounts();\n  };\n\n  updateAccounts = () => {\n    if (this.accountController.accountNamesArr.length < 1) {\n      this.setState({ lowest: 0, highest: 0, total: 0 });\n      return;\n    }\n    this.setState({\n      lowest: this.accountController.lowestBalance().accountName,\n      highest: this.accountController.highestBalance().accountName,\n      total: this.accountController.totalBalance()\n    });\n  };\n\n  displayCards = () => {\n    return this.accountController.accountNamesArr.map(account => {\n      return (\n        <Cards\n          key={account.key}\n          keyCard={account.key}\n          accountCard={account}\n          balanceCard={account.accountBalance}\n          deleteCard={this.deleteReactAccount}\n          updateCard={this.updateAccounts}\n        />\n      );\n    });\n  };\n\n  render() {\n    const card = this.displayCards();\n    return (\n      <Fragment>\n        <div id=\"container\">\n          <div id=\"left\">\n            <h2>\n              <strong>Account Cards</strong>\n            </h2>\n            <div id=\"leftChild\">{card}</div>\n          </div>\n          <div id=\"right\">\n            <InputForm onSubmit={this.addReactAccount} />\n            <ResultsDisp\n              lowestBal={this.state.lowest.toString()}\n              highestBal={this.state.highest.toString()}\n              totalBal={this.state.total.toString()}\n              numberAcc={this.accountController.accountNamesArr.length.toString()}\n            />\n          </div>\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nexport default AccountApp;\n","import React from \"react\";\n\nfunction InputBtn(props) {\n  return (\n    <button id=\"addAccBtn\" onClick={props.onSubmit}>\n      Add City\n    </button>\n  );\n}\n\nexport default InputBtn;\n","import React, { Fragment } from \"react\";\nimport \"./City.css\";\nimport InputBtn from \"./CityInputBtn\";\n\nclass InputForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cityName: \"\",\n      cityPopulation: \"\",\n      cityLatitude: \"\",\n      cityLongitude: \"\"\n    };\n    this.handleFormChange = this.handleFormChange.bind(this);\n    this.handleSubmitForm = this.handleSubmitForm.bind(this);\n  }\n  handleFormChange(e) {\n    const value = e.target.value;\n    const name = e.target.name;\n    this.setState({\n      [name]: value\n    });\n  }\n\n  handleSubmitForm(e) {\n    e.preventDefault(e);\n    this.props.onSubmit(this.state);\n    this.setState({\n      cityName: \"\",\n      cityPopulation: \"\",\n      cityLatitude: \"\",\n      cityLongitude: \"\"\n    });\n  }\n\n  render() {\n    return (\n      <Fragment>\n        <h2>\n          <strong>City Details</strong>\n        </h2>\n        <form onSubmit={this.handleSubmitForm}>\n          <label className=\"right-input-label\">City Name:</label>\n          <input\n            onChange={this.handleFormChange}\n            name=\"cityName\"\n            type=\"text\"\n            className=\"right-input\"\n            value={this.state.cityName}\n          />\n          <label className=\"right-input-label\">Latitude:</label>\n          <input\n            onChange={this.handleFormChange}\n            name=\"cityLatitude\"\n            type=\"number\"\n            className=\"right-input\"\n            min=\"0\"\n            step=\"0.01\"\n            value={this.state.cityLatitude}\n          />\n          <label className=\"right-input-label\">Longitude:</label>\n          <input\n            onChange={this.handleFormChange}\n            name=\"cityLongitude\"\n            type=\"number\"\n            className=\"right-input\"\n            min=\"0\"\n            step=\"0.01\"\n            value={this.state.cityLongitude}\n          />\n          <label className=\"right-input-label\">Population:</label>\n          <input\n            onChange={this.handleFormChange}\n            name=\"cityPopulation\"\n            type=\"number\"\n            className=\"right-input\"\n            min=\"0\"\n            step=\"0.01\"\n            value={this.state.cityPopulation}\n          />\n          <InputBtn onSubmit={this.handleSubmitForm} />\n        </form>\n      </Fragment>\n    );\n  }\n}\n\nexport default InputForm;\n","import React from \"react\";\n\nfunction ResultsDisp(props) {\n  return (\n    <div id=\"resultsContainer\">\n      <label className=\"results-label\">Total Population:</label>\n      <span className=\"results-span\">{props.totalPopulation}</span>\n      <br />\n      <label className=\"results-label\">Most Northern:</label>\n      <span className=\"results-span\">{props.northmostLatitude}</span>\n      <br />\n      <label className=\"results-label\">Most Southern:</label>\n      <span className=\"results-span\">{props.southmostLatitude}</span>\n      <br />\n      <label className=\"results-label\">Number of Cities:</label>\n      <span className=\"results-span\">{props.numberOfCities}</span>\n      <br />\n      <label className=\"results-label\">Server Message:</label>\n      <span className=\"results-span\">{props.serverMessage}</span>\n    </div>\n  );\n}\n\nexport default ResultsDisp;\n","export class CityClass {\n  constructor(key, cityName, cityLatitude, cityLongitude, cityPopulation) {\n    this.key = key; //should be unique identifier for each city\n    this.cityName = String(cityName);\n    this.cityLatitude = parseFloat(cityLatitude);\n    this.cityLongitude = parseFloat(cityLongitude);\n    cityPopulation < 0\n      ? (this.cityPopulation = 0)\n      : (this.cityPopulation = parseInt(cityPopulation));\n  }\n  show() {\n    return `\n\t\tName: ${this.cityName}\\nLatitude: ${this.cityLatitude}\\nLongitude: ${this.cityLongitude}\\nPopulation: ${this.cityPopulation}`.trim();\n  }\n  async movedIn(num) {\n    this.cityPopulation += num;\n  }\n  async movedOut(num) {\n    this.cityPopulation -= num;\n  }\n  howBig() {\n    if (this.cityPopulation >= 1 && this.cityPopulation <= 100) {\n      return `Hamlet`;\n    }\n    if (this.cityPopulation < 1000) {\n      return `Village`;\n    }\n    if (this.cityPopulation <= 20000) {\n      return `Town`;\n    }\n    if (this.cityPopulation <= 100000) {\n      return `Large Town`;\n    } else return `City`;\n  }\n  static formatPopulation(userInput) {\n    return Math.round(userInput * 100) / 100;\n  }\n}\n\nexport class Community {\n  constructor() {\n    this.cityNamesArr = [];\n  }\n  whichSphere(cityObj) {\n    if (cityObj.cityLatitude < 0) return `Southern Hemisphere`;\n    if (cityObj.cityLatitude > 0) return `Northern Hemisphere`;\n    return `Equator`;\n  }\n  getMostNorthern() {\n    const cityNamesArrCopy = this.cityNamesArr.slice();\n    return cityNamesArrCopy.sort((a, b) => b.cityLatitude - a.cityLatitude)[0];\n  }\n  getMostSouthern() {\n    const cityNamesArrCopy = this.cityNamesArr.slice();\n    return cityNamesArrCopy.sort((a, b) => a.cityLatitude - b.cityLatitude)[0];\n  }\n  getTotalPopulation() {\n    return this.cityNamesArr.reduce(\n      (accumulator, city) => city.cityPopulation + accumulator,\n      0\n    );\n  }\n  createCity(key, cityName, cityLatitude, cityLongitude, cityPopulation) {\n    let newCity = new CityClass(\n      key,\n      cityName,\n      cityLatitude,\n      cityLongitude,\n      cityPopulation\n    );\n    this.cityNamesArr.push(newCity);\n    return newCity;\n  }\n  async deleteCity(key) {\n    key = Number(key);\n    const newCityNamesArr = this.cityNamesArr.filter(city => city.key !== key);\n    this.cityNamesArr = newCityNamesArr;\n  }\n}\n","import { CityClass, Community } from \"./CityController.js\";\n\nconst url = \"http://localhost:5000/\";\nconst newCommunity = new Community();\n\nconst cityFetch = {\n  async postData(url = \"\", data = {}) {\n    const response = await fetch(url, {\n      method: \"POST\",\n      mode: \"cors\",\n      cache: \"no-cache\",\n      credentials: \"same-origin\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      redirect: \"follow\",\n      referrer: \"no-referrer\",\n      body: JSON.stringify(data)\n    });\n    const json = await response.json();\n    return json;\n  },\n\n  async getAllCitiesServer(newCommunity) {\n    let data = await cityFetch.postData(url + \"all\");\n    console.log(data);\n    if (data.length !== 0) {\n      newCommunity.cityNamesArr = data.map(\n        itm =>\n          new CityClass(\n            itm.key,\n            itm.cityName,\n            itm.cityLatitude,\n            itm.cityLongitude,\n            itm.cityPopulation\n          )\n      );\n      console.log(newCommunity.cityNamesArr);\n      let keysArray = newCommunity.cityNamesArr.map(itm => itm.key);\n      keysArray.sort((a, b) => b - a);\n      let lastKey = keysArray[0];\n      return lastKey;\n    }\n    let lastKey = 0;\n    return lastKey;\n  },\n\n  async postNewToServer(newCity) {\n    let data = await this.postData(url + \"add\", newCity);\n    return data;\n  },\n\n  async clearServerOnLoad() {\n    let data = await this.postData(url + \"clear\");\n    return data;\n  },\n\n  async updateCityServer(currentCity) {\n    let data = await this.postData(url + \"update\", currentCity);\n    return data;\n  },\n\n  async deleteCityServer(removeKey) {\n    let data = await this.postData(url + \"delete\", { key: removeKey });\n    return data;\n  },\n\n  async htmlReloadCities() {\n    fetch(\"http://localhost:5000/all\")\n      .then(request => request.json())\n      .then(data => {\n        data.map(serverCity => {\n          return newCommunity.createCity(\n            Number(serverCity.key),\n            serverCity.cityName,\n            Number(serverCity.cityLatitude),\n            Number(serverCity.cityLongitude),\n            Number(serverCity.cityPopulation)\n          );\n        });\n      });\n    return newCommunity.cityNamesArr;\n  }\n};\n\nexport default cityFetch;\n","import React, { Fragment } from \"react\";\nimport cityFetch from \"./FetchFunctions\";\n\nclass Cards extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cityCard: this.props.cityCard,\n      cardInput: \"\",\n      cardResult: \"\"\n    };\n    this.handleInputChange = this.handleInputChange.bind(this);\n  }\n\n  handleInputChange(e) {\n    this.setState({ cardInput: e.target.value });\n  }\n\n  formatCardInput(userInputInCard) {\n    if (\n      isNaN(userInputInCard) ||\n      typeof userInputInCard === \"undefined\" ||\n      userInputInCard === \"\"\n    ) {\n      return false;\n    }\n    return parseFloat(userInputInCard);\n  }\n\n  handleMovedInBtn = e => {\n    e.preventDefault(e);\n    this.props.updateCard();\n    let cardInputValue = this.formatCardInput(this.state.cardInput);\n    if (!cardInputValue || cardInputValue <= 0) {\n      this.setState({\n        cardResult: `Enter Valid Population for Move In`\n      });\n      return;\n    }\n    this.props.updateCard();\n    this.state.cityCard.movedIn(cardInputValue);\n    cityFetch.updateCityServer(this.state.cityCard);\n    const cityCardUpdate = this.state.cityCard;\n    this.setState({\n      cityCard: cityCardUpdate,\n      cardInput: \"\",\n      cardResult: `${cardInputValue} People Moved In`\n    });\n  };\n\n  handleMovedOutBtn = e => {\n    e.preventDefault(e);\n    this.props.updateCard();\n    let cardInputValue = this.formatCardInput(this.state.cardInput);\n    if (!cardInputValue || cardInputValue <= 0) {\n      this.setState({\n        cardResult: `Enter Valid Population for Move Out`\n      });\n      return;\n    } else if (cardInputValue > this.state.cityCard.cityPopulation) {\n      this.setState({\n        cardResult: `Cannot Move Out More People Than Live Here`\n      });\n      return;\n    }\n    this.state.cityCard.movedOut(cardInputValue);\n    cityFetch.updateCityServer(this.state.cityCard);\n    const cityCardUpdate = this.state.cityCard;\n    this.setState({\n      cityCard: cityCardUpdate,\n      cardInput: \"\",\n      cardResult: `${cardInputValue} People Moved Out`\n    });\n  };\n\n  handleHowBigBtn = () => {\n    const howBig = this.state.cityCard.howBig();\n    this.setState({\n      cardResult: `${this.state.cityCard.cityName} is a ${howBig}`\n    });\n    this.props.updateCard();\n  };\n\n  handleRemoveBtn = () => {\n    this.props.deleteCard(this.props.keyCard);\n    cityFetch.deleteCityServer(this.props.keyCard);\n    const cityCardUpdate = this.state.cityCard;\n    this.setState({\n      cityCard: cityCardUpdate\n    });\n    this.props.updateCard();\n  };\n\n  render() {\n    let { cityName, cityPopulation } = this.state.cityCard;\n    return (\n      <Fragment>\n        <div className=\"card-div\">\n          <span className=\"para-left-card-name\">City Name: {cityName}</span>\n          <br />\n          <input\n            value={this.state.cardInput}\n            onChange={this.handleInputChange}\n            className=\"card-input\"\n            type=\"number\"\n            min=\"0\"\n            step=\"0.01\"\n          />\n          <br />\n          <button className=\"btn-card-dep\" onClick={this.handleMovedInBtn}>\n            Move In\n          </button>\n          <button className=\"btn-card-wth\" onClick={this.handleMovedOutBtn}>\n            Move Out\n          </button>\n          <button className=\"btn-card-bal\" onClick={this.handleHowBigBtn}>\n            How Big\n          </button>\n          <br />\n          <button className=\"btn-card-del\" onClick={this.handleRemoveBtn}>\n            Remove City\n          </button>\n          <br />\n          <span className=\"para-left-card-output\">\n            Current Population: {cityPopulation}\n          </span>\n          <br />\n          <span className=\"para-left-card-output\">{this.state.cardResult}</span>\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nexport default Cards;\n","import React, { Fragment } from \"react\";\nimport \"./City.css\";\nimport InputForm from \"./CityInputForm\";\nimport ResultsDisp from \"./CityResultsDisp\";\nimport { Community } from \"./CityController\";\nimport Cards from \"./CityCards\";\nimport cityFetch from \"./FetchFunctions\";\n\nclass CityApp extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      southernmost: \"--\",\n      northernmost: \"--\",\n      total: 0,\n      serverMsg: \"--\",\n      cityCounter: 0\n    };\n    this.cityController = new Community();\n  }\n\n  async componentDidMount() {\n    const newCommunity = new Community();\n    let keyCounter;\n    let lastKey = await cityFetch.getAllCitiesServer(newCommunity);\n    // newCommunity is mutated inside the getAllCitiesServer method\n    if (newCommunity.cityNamesArr.length >= 1) {\n      keyCounter = lastKey + 1;\n      this.cityController = newCommunity;\n      this.setState({\n        cityCounter: keyCounter,\n        serverMsg: `Success! Last Key Found`\n      });\n    } else if (newCommunity.cityNamesArr.length === 0) {\n      this.setState({ serverMsg: `Good! Server Is Empty` });\n    } else {\n      this.setState({ serverMsg: `Error! Something Went Wrong!` });\n    }\n    this.updateCities();\n    console.log(this.cityController.cityNamesArr);\n  }\n\n  async serverData() {\n    let response = await fetch(\"http://localhost:5000/all\");\n    let data = await response.json();\n    return data;\n  }\n\n  addReactCity = params => {\n    let counterValue = this.state.cityCounter;\n    const { cityName, cityLatitude, cityLongitude, cityPopulation } = params;\n    this.cityController.createCity(\n      counterValue,\n      cityName,\n      cityLatitude,\n      cityLongitude,\n      cityPopulation\n    );\n    console.log(this.cityController.cityNamesArr);\n    this.setState(newState => {\n      return {\n        cityCounter: newState.cityCounter + 1\n      };\n    });\n    cityFetch.postNewToServer(\n      this.cityController.cityNamesArr.filter(\n        itm => itm.key === counterValue\n      )[0]\n    );\n    this.updateCities();\n  };\n\n  deleteReactCity = num => {\n    this.cityController.deleteCity(num);\n    console.log(this.cityController.cityNamesArr);\n    this.updateCities();\n  };\n\n  updateCities = () => {\n    if (this.cityController.cityNamesArr.length < 1) {\n      this.setState({ southernmost: 0, northernmost: 0, total: 0 });\n      return;\n    }\n    this.setState({\n      southernmost: this.cityController.getMostSouthern().cityName,\n      northernmost: this.cityController.getMostNorthern().cityName,\n      total: this.cityController.getTotalPopulation()\n    });\n  };\n\n  displayCards = () => {\n    return this.cityController.cityNamesArr.map(city => {\n      return (\n        <Cards\n          key={city.key}\n          keyCard={city.key}\n          cityCard={city}\n          populationCard={city.cityPopulation}\n          deleteCard={this.deleteReactCity}\n          updateCard={this.updateCities}\n        />\n      );\n    });\n  };\n\n  render() {\n    const card = this.displayCards();\n    return (\n      <Fragment>\n        <div id=\"container\">\n          <div id=\"left\">\n            <h2>\n              <strong>City Cards</strong>\n            </h2>\n            <div id=\"leftChild\">{card}</div>\n          </div>\n          <div id=\"right\">\n            <InputForm\n              onSubmit={this.addReactCity}\n              cityCounter={this.state.cityCounter.toString()}\n            />\n            <ResultsDisp\n              southmostLatitude={this.state.southernmost.toString()}\n              northmostLatitude={this.state.northernmost.toString()}\n              totalPopulation={this.state.total.toString()}\n              numberOfCities={this.cityController.cityNamesArr.length.toString()}\n              serverMessage={this.state.serverMsg.toString()}\n            />\n          </div>\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nexport default CityApp;\n","export class ListNode {\n  constructor(subject, amount, forwardPointer = null) {\n    this.subject = subject;\n    this.amount = amount;\n    this.forwardPointer = forwardPointer;\n  }\n\n  showDetails() {\n    return `subject: ${this.subject}\\namount: ${this.amount}`.trim();\n  }\n}\n\nexport class LinkedList {\n  constructor() {\n    // the head attribute stores a pointer to the first node in our linked list\n    this.head = null;\n    this.current = null;\n  }\n  /*\n  first ⇒ position to the first node\n  last ⇒ position to the last node\n  next ⇒ move to the next node\n  previous ⇒ backup one node (how are we going to do this?)\n  insert ⇒ inserts a new node after the current node (which node will be the current node after the insertion?)\n  delete ⇒ delete the current node (which node will be the current node after the deletion?)\n*/\n  first() {\n    this.current = this.head;\n  }\n\n  last() {\n    while (this.current.forwardPointer) {\n      this.next();\n    }\n  }\n\n  next() {\n    if (this.current.forwardPointer) {\n      this.current = this.current.forwardPointer;\n    }\n  }\n\n  previous() {\n    let previousNode = this.head;\n    while (\n      this.current !== this.head &&\n      previousNode.forwardPointer !== this.current\n    ) {\n      previousNode = previousNode.forwardPointer;\n    }\n    this.current = previousNode;\n  }\n\n  insert(subject, amount) {\n    if (!this.head) {\n      this.head = new ListNode(subject, amount);\n      this.current = this.head;\n    } else {\n      const newNode = new ListNode(subject, amount);\n      newNode.forwardPointer = this.current.forwardPointer;\n      this.current.forwardPointer = newNode;\n      this.current = newNode;\n    }\n  }\n\n  delete() {\n    if (this.current === this.head) {\n      this.head = this.head.forwardPointer;\n      this.current = this.head;\n    } else {\n      this.previous();\n      this.current.forwardPointer = this.current.forwardPointer.forwardPointer;\n    }\n  }\n\n  total() {\n    let total = 0;\n    let node = this.head;\n    while (node) {\n      total += Number(node.amount);\n      node = node.forwardPointer;\n    }\n    return total;\n  }\n}\n","import React, { useState, Fragment } from \"react\";\nimport \"./LinkedList.css\";\nimport Button from \"react-bootstrap/Button\";\nimport { LinkedList } from \"./LinkedListFns\";\n\nconst newList = new LinkedList();\n\nconst LinkedListApp = () => {\n  const [subject, setSubject] = useState(\"\");\n  const [amount, setAmount] = useState(\"\");\n  const [current, setCurrent] = useState(\"\");\n  const [total, setTotal] = useState(\"\");\n\n  function pressEnter(e) {\n    if (e.key === `Enter`) {\n      handleInsert();\n      console.log(\"enter pressed\");\n    }\n  }\n\n  function onSubjectInputChange(e) {\n    setSubject(e.target.value);\n  }\n\n  function onAmountInputChange(e) {\n    setAmount(e.target.value);\n  }\n\n  const handleInsert = () => {\n    newList.insert(subject, amount);\n    setCurrent(newList.current);\n    setTotal(newList.total());\n    setSubject(\"\");\n    setAmount(\"\");\n    console.log(\"insert clicked\");\n  };\n\n  const handleFirst = () => {\n    newList.first();\n    setCurrent(newList.current);\n    console.log(\"first clicked\");\n  };\n\n  const handleLast = () => {\n    newList.last();\n    setCurrent(newList.current);\n    console.log(\"last clicked\");\n  };\n\n  const handleNext = () => {\n    newList.next();\n    setCurrent(newList.current);\n    console.log(\"next clicked\");\n  };\n\n  const handlePrevious = () => {\n    newList.previous();\n    setCurrent(newList.current);\n    console.log(\"previous clicked\");\n  };\n\n  const handleDelete = () => {\n    newList.delete();\n    setCurrent(newList.current);\n    setTotal(newList.total());\n    console.log(\"delete clicked\");\n  };\n\n  const renderNodes = () => {\n    const listDisplay = [];\n    let newNode = newList.head;\n\n    while (newList.head && newNode) {\n      listDisplay.push(\n        <div\n          key={newNode.subject + newNode.amount}\n          id=\"node-list\"\n          style={{ color: \"#808080\" }}\n        >\n          {newNode.subject}: {newNode.amount} {current === newNode ? \" <-\" : \"\"}\n        </div>\n      );\n      newNode = newNode.forwardPointer;\n    }\n    return listDisplay;\n  };\n\n  return (\n    <Fragment>\n      <div id=\"container\">\n        <div id=\"left\">\n          <h2>\n            <strong>Linked Lists Display</strong>\n          </h2>\n          <div id=\"leftChild\">\n            <br />\n            <label className=\"left-input-label\">Subject:</label>\n            <input\n              name=\"subject\"\n              type=\"text\"\n              className=\"left-input\"\n              placeholder=\"enter subject\"\n              value={subject}\n              onChange={onSubjectInputChange}\n              onKeyPress={pressEnter}\n            />\n            <br />\n            <label className=\"left-input-label\">Amount:</label>\n            <input\n              name=\"amount\"\n              type=\"number\"\n              className=\"left-input\"\n              placeholder=\"enter amount\"\n              min=\"0\"\n              step=\"0.01\"\n              value={amount}\n              onChange={onAmountInputChange}\n              onKeyPress={pressEnter}\n            />\n            <br />\n            <br />\n            <Button onClick={handleFirst} id=\"reset\" variant=\"primary\">\n              <b style={{ color: \"white\" }}>{\"|<\"}</b>\n            </Button>\n            <Button onClick={handlePrevious} id=\"reset\" variant=\"primary\">\n              <b style={{ color: \"white\" }}>{\"<<\"}</b>\n            </Button>\n            <Button onClick={handleInsert} id=\"reset\" variant=\"primary\">\n              <b style={{ color: \"white\" }}>{\"[+]\"}</b>\n            </Button>\n            <Button onClick={handleDelete} id=\"reset\" variant=\"primary\">\n              <b style={{ color: \"white\" }}>{\"[-]\"}</b>\n            </Button>\n            <Button onClick={handleNext} id=\"reset\" variant=\"primary\">\n              <b style={{ color: \"white\" }}>{\">>\"}</b>\n            </Button>\n            <Button onClick={handleLast} id=\"reset\" variant=\"primary\">\n              <b style={{ color: \"white\" }}>{\">|\"}</b>\n            </Button>\n            <div\n              id=\"resultsLinkedList\"\n              className={newList.head ? null : \"hidden\"}\n            >\n              <span\n                style={{\n                  color: \"grey\",\n                  fontWeight: \"bold\"\n                }}\n              >\n                Nodes Listed Here:\n              </span>\n              <div id=\"resultsRender\">\n                {renderNodes()}\n                <span style={{ color: \"#808080\" }}> Total: {total}</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </Fragment>\n  );\n};\n\nexport default LinkedListApp;\n","import React from \"react\";\nimport logo from \"../logo.svg\";\nimport \"./Stack.css\";\n\nclass StackApp extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      pageStatus: `Stack Exercise!`\n    };\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1\n            style={{\n              color: \"#ffff00\",\n              fontFamily: \"Ubuntu\",\n              fontSize: \"2.5rem\"\n            }}\n          >\n            <strong>{this.state.pageStatus}</strong>\n          </h1>\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p\n            style={{\n              color: \"#ffff00\",\n              fontFamily: \"Ubuntu\",\n              fontSize: \"2.5rem\"\n            }}\n          >\n            <strong>Have Fun!</strong>\n          </p>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default StackApp;\n","import React from \"react\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Logo from \"../components/Logo\";\nimport HomeApp from \"../components/home/Home\";\nimport GameApp from \"../components/game/Game\";\nimport AccountApp from \"../components/account/Account\";\nimport CityApp from \"../components/city/City\";\nimport LinkedListApp from \"../components/linkedlist/LinkedList\";\nimport StackApp from \"../components/stack/Stack\";\nimport homeLogo from \"./svg_images/001-home.svg\";\nimport gameLogo from \"./svg_images/002-game.svg\";\nimport accountLogo from \"./svg_images/003-account.svg\";\nimport cityLogo from \"./svg_images/004-city.svg\";\nimport linkedListLogo from \"./svg_images/005-link.svg\";\nimport stackLogo from \"./svg_images/006-stack.svg\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      selected: homeLogo\n    };\n    this.icons = [\n      homeLogo,\n      gameLogo,\n      accountLogo,\n      cityLogo,\n      linkedListLogo,\n      stackLogo\n    ];\n  }\n\n  onSelect = e => {\n    this.setState({\n      selected: e.target.name\n    });\n  };\n\n  renderIcons = () => {\n    return this.icons.map(icon => {\n      return (\n        <Logo key={icon} name={icon} image={icon} onClick={this.onSelect} />\n      );\n    });\n  };\n\n  showPage = () => {\n    if (this.state.selected === homeLogo) return <HomeApp />;\n    if (this.state.selected === gameLogo) return <GameApp />;\n    if (this.state.selected === accountLogo) return <AccountApp />;\n    if (this.state.selected === cityLogo) return <CityApp />;\n    if (this.state.selected === linkedListLogo) return <LinkedListApp />;\n    if (this.state.selected === stackLogo) return <StackApp />;\n  };\n\n  render() {\n    return (\n      <div>\n        <nav>\n          <header className=\"images-header\">{this.renderIcons()}</header>\n        </nav>\n        {this.showPage()}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport App from \"./containers/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}